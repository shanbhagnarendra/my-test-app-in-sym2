<?php

namespace Proxies\__CG__\Hrms\Bundle\EmployeeBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class HrmConfig extends \Hrms\Bundle\EmployeeBundle\Entity\HrmConfig implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setCkey($ckey)
    {
        $this->__load();
        return parent::setCkey($ckey);
    }

    public function getCkey()
    {
        $this->__load();
        return parent::getCkey();
    }

    public function setValue($value)
    {
        $this->__load();
        return parent::setValue($value);
    }

    public function getValue()
    {
        $this->__load();
        return parent::getValue();
    }

    public function setFType($fType)
    {
        $this->__load();
        return parent::setFType($fType);
    }

    public function getFType()
    {
        $this->__load();
        return parent::getFType();
    }

    public function setFKey($fKey)
    {
        $this->__load();
        return parent::setFKey($fKey);
    }

    public function getFKey()
    {
        $this->__load();
        return parent::getFKey();
    }

    public function setFValue($fValue)
    {
        $this->__load();
        return parent::setFValue($fValue);
    }

    public function getFValue()
    {
        $this->__load();
        return parent::getFValue();
    }

    public function setIsEditable($isEditable)
    {
        $this->__load();
        return parent::setIsEditable($isEditable);
    }

    public function getIsEditable()
    {
        $this->__load();
        return parent::getIsEditable();
    }

    public function setComment($comment)
    {
        $this->__load();
        return parent::setComment($comment);
    }

    public function getComment()
    {
        $this->__load();
        return parent::getComment();
    }

    public function setIdSeq($idSeq)
    {
        $this->__load();
        return parent::setIdSeq($idSeq);
    }

    public function getIdSeq()
    {
        $this->__load();
        return parent::getIdSeq();
    }

    public function getIdConfig()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["idConfig"];
        }
        $this->__load();
        return parent::getIdConfig();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'name', 'ckey', 'value', 'fType', 'fKey', 'fValue', 'isEditable', 'comment', 'idSeq', 'idConfig');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}